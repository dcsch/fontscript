//
//  FSPointToSegmentPenTests.m
//  FontScriptTests
//
//  Created by David Schweinsberg on 7/10/18.
//  Copyright Â© 2018 David Schweinsberg. All rights reserved.
//

#import <XCTest/XCTest.h>
#import "FSPointToSegmentPen.h"
#import "FSPoint.h"

@interface FSSegmentTestPen : FSPointToSegmentPen
{
  void (^_block)(NSArray<FSSegment *> *segments);
}

- (instancetype)initWithFlushBlock:(void (^)(NSArray<FSSegment *> *segments))block;
- (void)flushSegments:(nonnull NSArray<FSSegment *> *)segments;

@end

@implementation FSSegmentTestPen

- (instancetype)initWithFlushBlock:(void (^)(NSArray<FSSegment *> *segments))block {
  self = [super init];
  if (self) {
    _block = block;
  }
  return self;
}

- (void)flushSegments:(nonnull NSArray<FSSegment *> *)segments {
  _block(segments);
}

@end

@interface FSPointToSegmentPenTests : XCTestCase

@end

@implementation FSPointToSegmentPenTests

- (void)setUp {
    [super setUp];
    // Put setup code here. This method is called before the invocation of each test method in the class.
}

- (void)tearDown {
    // Put teardown code here. This method is called after the invocation of each test method in the class.
    [super tearDown];
}

- (void)testEmpty {
  __block NSArray<FSSegment *> *flushedSegments;
  FSSegmentTestPen *pen = [[FSSegmentTestPen alloc] initWithFlushBlock:^(NSArray<FSSegment *> *segments) {
    flushedSegments = segments;
  }];

  [pen beginPath];
  [pen endPath];

  XCTAssertEqual(flushedSegments.count, 0);
}

- (void)testSimpleMove {
  __block NSArray<FSSegment *> *flushedSegments;
  FSSegmentTestPen *pen = [[FSSegmentTestPen alloc] initWithFlushBlock:^(NSArray<FSSegment *> *segments) {
    flushedSegments = segments;
  }];

  [pen beginPath];
  [pen addPointWithPoint:CGPointMake(100, 100) segmentType:FSSegmentTypeMove smooth:NO];
  [pen endPath];

  XCTAssertEqual(flushedSegments.count, 1);
  XCTAssertEqual(flushedSegments[0].type, FSSegmentTypeMove);
  XCTAssertEqual(flushedSegments[0].points.count, 1);
  XCTAssertEqual(flushedSegments[0].points[0].x, 100);
  XCTAssertEqual(flushedSegments[0].points[0].y, 100);
}

- (void)testBox {
  __block NSArray<FSSegment *> *flushedSegments;
  FSSegmentTestPen *pen = [[FSSegmentTestPen alloc] initWithFlushBlock:^(NSArray<FSSegment *> *segments) {
    flushedSegments = segments;
  }];

  [pen beginPath];
  [pen addPointWithPoint:CGPointMake(100, 100) segmentType:FSSegmentTypeLine smooth:NO];
  [pen addPointWithPoint:CGPointMake(100, -100) segmentType:FSSegmentTypeLine smooth:NO];
  [pen addPointWithPoint:CGPointMake(-100, -100) segmentType:FSSegmentTypeLine smooth:NO];
  [pen addPointWithPoint:CGPointMake(-100, 100) segmentType:FSSegmentTypeLine smooth:NO];
  [pen endPath];

  XCTAssertEqual(flushedSegments.count, 4);
  for (FSSegment *segment in flushedSegments) {
    XCTAssertEqual(segment.type, FSSegmentTypeLine);
    XCTAssertEqual(segment.points.count, 1);
  }
  // Points array will be rotated so that the first is now the last
  XCTAssertEqual(flushedSegments[3].points[0].x, 100);
  XCTAssertEqual(flushedSegments[3].points[0].y, 100);
  XCTAssertEqual(flushedSegments[0].points[0].x, 100);
  XCTAssertEqual(flushedSegments[0].points[0].y, -100);
  XCTAssertEqual(flushedSegments[1].points[0].x, -100);
  XCTAssertEqual(flushedSegments[1].points[0].y, -100);
  XCTAssertEqual(flushedSegments[2].points[0].x, -100);
  XCTAssertEqual(flushedSegments[2].points[0].y, 100);
}

- (void)testOpenAngledLine {
  __block NSArray<FSSegment *> *flushedSegments;
  FSSegmentTestPen *pen = [[FSSegmentTestPen alloc] initWithFlushBlock:^(NSArray<FSSegment *> *segments) {
    flushedSegments = segments;
  }];

  [pen beginPath];
  [pen addPointWithPoint:CGPointMake(0, 100) segmentType:FSSegmentTypeMove smooth:NO];
  [pen addPointWithPoint:CGPointMake(0, 0) segmentType:FSSegmentTypeLine smooth:NO];
  [pen addPointWithPoint:CGPointMake(100, 0) segmentType:FSSegmentTypeLine smooth:NO];
  [pen endPath];

  XCTAssertEqual(flushedSegments.count, 3);
  XCTAssertEqual(flushedSegments[0].type, FSSegmentTypeMove);
  XCTAssertEqual(flushedSegments[1].type, FSSegmentTypeLine);
  XCTAssertEqual(flushedSegments[2].type, FSSegmentTypeLine);

  XCTAssertEqual(flushedSegments[0].points.count, 1);
  XCTAssertEqual(flushedSegments[0].points[0].x, 0);
  XCTAssertEqual(flushedSegments[0].points[0].y, 100);

  XCTAssertEqual(flushedSegments[1].points.count, 1);
  XCTAssertEqual(flushedSegments[1].points[0].x, 0);
  XCTAssertEqual(flushedSegments[1].points[0].y, 0);

  XCTAssertEqual(flushedSegments[2].points.count, 1);
  XCTAssertEqual(flushedSegments[2].points[0].x, 100);
  XCTAssertEqual(flushedSegments[2].points[0].y, 0);
}

- (void)testDee {
  __block NSArray<FSSegment *> *flushedSegments;
  FSSegmentTestPen *pen = [[FSSegmentTestPen alloc] initWithFlushBlock:^(NSArray<FSSegment *> *segments) {
    flushedSegments = segments;
  }];

  [pen beginPath];
  [pen addPointWithPoint:CGPointMake(-100, 100) segmentType:FSSegmentTypeLine smooth:NO];
  [pen addPointWithPoint:CGPointMake(0, 100) segmentType:FSSegmentTypeLine smooth:NO];
  [pen addPointWithPoint:CGPointMake(50, 100) segmentType:FSSegmentTypeOffCurve smooth:NO];
  [pen addPointWithPoint:CGPointMake(100, 50) segmentType:FSSegmentTypeOffCurve smooth:NO];
  [pen addPointWithPoint:CGPointMake(100, 0) segmentType:FSSegmentTypeCurve smooth:NO];
  [pen addPointWithPoint:CGPointMake(100, -50) segmentType:FSSegmentTypeOffCurve smooth:NO];
  [pen addPointWithPoint:CGPointMake(50, -100) segmentType:FSSegmentTypeOffCurve smooth:NO];
  [pen addPointWithPoint:CGPointMake(0, -100) segmentType:FSSegmentTypeCurve smooth:NO];
  [pen addPointWithPoint:CGPointMake(-100, -100) segmentType:FSSegmentTypeLine smooth:NO];
  [pen endPath];

  XCTAssertEqual(flushedSegments.count, 5);
  XCTAssertEqual(flushedSegments[0].type, FSSegmentTypeLine);
  XCTAssertEqual(flushedSegments[1].type, FSSegmentTypeCurve);
  XCTAssertEqual(flushedSegments[2].type, FSSegmentTypeCurve);
  XCTAssertEqual(flushedSegments[3].type, FSSegmentTypeLine);
  XCTAssertEqual(flushedSegments[4].type, FSSegmentTypeLine);
}

- (void)testQDee {
  __block NSArray<FSSegment *> *flushedSegments;
  FSSegmentTestPen *pen = [[FSSegmentTestPen alloc] initWithFlushBlock:^(NSArray<FSSegment *> *segments) {
    flushedSegments = segments;
  }];

  [pen beginPath];
  [pen addPointWithPoint:CGPointMake(-100, 100) segmentType:FSSegmentTypeLine smooth:NO];
  [pen addPointWithPoint:CGPointMake(0, 100) segmentType:FSSegmentTypeLine smooth:NO];
  [pen addPointWithPoint:CGPointMake(100, 100) segmentType:FSSegmentTypeOffCurve smooth:NO];
  [pen addPointWithPoint:CGPointMake(100, 0) segmentType:FSSegmentTypeQCurve smooth:NO];
  [pen addPointWithPoint:CGPointMake(100, -100) segmentType:FSSegmentTypeOffCurve smooth:NO];
  [pen addPointWithPoint:CGPointMake(0, -100) segmentType:FSSegmentTypeQCurve smooth:NO];
  [pen addPointWithPoint:CGPointMake(-100, -100) segmentType:FSSegmentTypeLine smooth:NO];
  [pen endPath];

  XCTAssertEqual(flushedSegments.count, 5);
  XCTAssertEqual(flushedSegments[0].type, FSSegmentTypeLine);
  XCTAssertEqual(flushedSegments[1].type, FSSegmentTypeQCurve);
  XCTAssertEqual(flushedSegments[2].type, FSSegmentTypeQCurve);
  XCTAssertEqual(flushedSegments[3].type, FSSegmentTypeLine);
  XCTAssertEqual(flushedSegments[4].type, FSSegmentTypeLine);
}

- (void)testQOh {
  __block NSArray<FSSegment *> *flushedSegments;
  FSSegmentTestPen *pen = [[FSSegmentTestPen alloc] initWithFlushBlock:^(NSArray<FSSegment *> *segments) {
    flushedSegments = segments;
  }];

  [pen beginPath];
  [pen addPointWithPoint:CGPointMake(-100, 100) segmentType:FSSegmentTypeOffCurve smooth:NO];
  [pen addPointWithPoint:CGPointMake(100, 100) segmentType:FSSegmentTypeOffCurve smooth:NO];
  [pen addPointWithPoint:CGPointMake(100, -100) segmentType:FSSegmentTypeOffCurve smooth:NO];
  [pen addPointWithPoint:CGPointMake(-100, -100) segmentType:FSSegmentTypeOffCurve smooth:NO];
  [pen endPath];

  XCTAssertEqual(flushedSegments.count, 1);
  XCTAssertEqual(flushedSegments[0].type, FSSegmentTypeQCurve);
}

@end
